{"version":3,"sources":["images/novaLogo.png","history.js","pages/home/Home.js","pages/navbar/Navbar.js","pages/usbdrive/USBDrive.js","pages/phishingStats/phishingStats.js","pages/admin/Admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","createBrowserHistory","Home","redirectPhishing","_this","props","history","push","redirectUSB","_this2","this","react_default","a","createElement","className","alt","src","novaLogo","onClick","Component","Navbar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","redirectHome","state","settingOpen","withRouter","phishingStats","getNumViews","fetch","method","then","res","console","log","json","data","setState","pageViews","views","updateNumViews","JSON","stringify","headers","Headers","body","componentDidMount","numberOfDrives","pages_navbar_Navbar","key","toFixed","Admin","resetViews","reset","printResetMessage","App","Router","Switch","Route","exact","path","component","USBDrive","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6349545a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/novaLogo.362d7fee.png\";","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React, { Component } from 'react';\nimport './home.css';\nimport novaLogo from '../../images/novaLogo.png';\n\nclass Home extends Component {\n    \n    redirectPhishing = () => {\n        this.props.history.push('/phishingStats');\n    }\n\n    redirectUSB = () => {\n        this.props.history.push('/usbStats');\n    }\n    \n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"welcomeText\">\n                  <strong><i>{\"Villanova Cyber Security Project\"}</i></strong>\n                </div><br />\n                <div className=\"centerImage\">\n                    <img className='novaLogo' alt='Nova Logo' src={novaLogo}/>\n                </div><br/>\n                <div>\n                    <p className=\"homePageText\">\n                     Welcome to Villanova Universitys Cyber Security Test.  This is a test conducted by John Persichilli, Kevin Calhoun, Jared Rymsza, and Matt O'Connell\n                    designed to compare the students at Villanova's knowledge of cyber saftey to that of the general population.<br />  \n                    Please refrain from plugging any device that is not yours into your computer\n                    or submitting usernames on passwords on unsecure websites. <br />\n                    Click on the \"View Phishig Stats\" button to view the success rate of the phishing scam. <br /> \n                    Click on the \"View USB Stats\" button to view the success rate of the USB attacks.<br />\n                    </p>\n                </div>\n                <div className=\"mainPageButtons\">\n                    <button className=\"mainOptionButton\" onClick={() => this.redirectPhishing()}>\n                        View Phishing Stats\n                    </button><br/><br/>\n                    <button className=\"mainOptionButton\" onClick={() => this.redirectUSB()}>\n                        View USB Stats\n                    </button><br/><br/>\n                </div>\n                <div>\n                    <p>\n                        *Disclaimer: No personal information is stored during this survey.\n                    </p>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport {Route, withRouter } from 'react-router-dom';\nimport './Navbar.css';\nimport novaLogo from '../../images/novaLogo.png'\n//import goalieIcon from '../../images/hockeyGoalieIcon.jpg'\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            settingOpen: false\n        };\n    }\n\n    redirectPhishing = () => {\n        this.props.history.push('/phishingStats');\n    }\n\n    redirectUSB = () => {\n        this.props.history.push('/usbStats');\n    }\n\n    redirectHome = () => {\n        this.props.history.push('/');\n    }\n\n    render() {\n        return (\n        <div>\n          <nav className=\"navbar navbar-expand-lg\">\n            <img className=\"navbarLogo novaIcon\" src={novaLogo} alt='novaNavbarLogo'  onClick={() => this.redirectHome()}/>\n            <div className=\"homeButtons\">\n                <button className=\"navbarButtons\" onClick={() => this.redirectHome()}>\n                    Home\n                </button><br/><br/>\n                <button className=\"navbarButtons\" onClick={() => this.redirectPhishing()}>\n                    View Phishing Stats\n                </button><br/><br/>\n                <button className=\"navbarButtons\" onClick={() => this.redirectUSB()}>\n                    View USB Stats\n                </button><br/><br/>\n            </div>\n\n{/*             <img className=\"navbarLogo goalieIcon\" src={goalieIcon} alt='novaNavbarLogo' />\n             <div className=\"dropDown\">\n                <div classNae=\"dropDownItems\">\n                  <a href='/'>Home</a>\n                    <a href='/'>Settings</a>\n                    <a href='/'>Logout</a> *\n                </div>\n            </div> */}\n          </nav>\n        </div>\n        );\n      }\n}\n\nexport default withRouter(Navbar);","import React, { Component } from 'react';\nimport novaLogo from '../../images/novaLogo.png';\nimport Navbar from '../navbar/Navbar';\n\nimport './usbDrive.css';\n\nclass phishingStats extends Component {\n    constructor(props){\n        super()\n        this.state = {\n          pageViews: 0,\n          numberOfDrives: 52,\n        }\n    }\n    redirectPhishing = () => {\n        this.props.history.push('/phishingStats');\n    }\n\n    redirectUSB = () => {\n        this.props.history.push('/usbStats');\n    }\n\n    getNumViews = () => {\n        var url=\"/usbStats\";\n        fetch(url, {\n            method: 'GET'\n        })\n            .then(res => {\n                console.log(res);\n                return res.json();\n            }).then( data => {\n                console.log(data)\n                this.setState({pageViews: data.views})\n            })\n    }\n\n    updateNumViews = () => {\n        var data = JSON.stringify({views: this.state.pageViews});\n        console.log(\"Input data:\"+data);\n        var url=\"/usbStats\";\n        fetch(url, {\n            method: 'POST',\n            headers: new Headers(),\n            body: JSON.stringify({views: this.state.pageViews})\n        })\n            .then(res => {\n                res.json();\n            })\n        }\n\n    componentDidMount = () => {\n        this.getNumViews();\n        this.updateNumViews();\n        console.log(\"Page Views:\"+this.state.pageViews);\n    }\n    \n    render() {\n        return (\n            <div>\n                <Navbar />\n                    <div className=\"container\">\n                        <div className=\"welcomeText\">\n                        <strong><i>{\"USB Stats\"}</i></strong>\n                        </div><br />\n                        <div className=\"centerImage\">\n                            <img className='novaLogo' alt='Nova Logo' src={novaLogo}/>\n                        </div>\n                        <div>\n                            <p className=\"homePageText\">\n                                You have failed Villanova Universitys Cyber Security Test.  This is a test conducted by John Persichilli, Kevin Calhoun, Jared Rymsza, and Matt O'Connell\n                                designed to compare the students at Villanova's knowledge of cyber saftey to that of the general population.<br />  \n                                Please refrain from plugging any device that is not yours into your computer such as the flash drive you previously found.  Below\n                                are the statistics for the USB attack.\n                            </p>\n                        </div>\n                        <table className=\"formatStatsTable\">\n                            <tbody>\n                                <tr className=\"headerCol\">\n                                    <th className=\"listHeadings col1Width\"></th>\n                                    <th className=\"listHeadings col2Width\">Number of Students</th>\n                                </tr>\n                                <tr key='1' className=\"formatStatsRow\">\n                                    <td className=\"listNames\">USB Drives Plugged in and ran:</td>\n                                    <td className=\"listOther\">{this.state.pageViews}</td>\n                                </tr>\n                                <tr key='2' className=\"formatStatsRow\">\n                                    <td className=\"listNames\">USB Drives Left Out:</td>\n                                    <td className=\"listOther\">{this.state.numberOfDrives}</td>\n                                </tr>\n                                <tr key='3' className=\"formatStatsRow\">\n                                    <td className=\"listNames\">Percent:</td>\n                                    <td className=\"listOther\">{((this.state.pageViews/this.state.numberOfDrives)*100).toFixed(2)}%</td>\n                                </tr>\n                            </tbody>\n                        </table><br />\n                        <div className=\"seperatePar\">\n                            <p>\n                                *Disclaimer: No personal information is stored during this survey.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default phishingStats;","import React, { Component } from 'react';\nimport novaLogo from '../../images/novaLogo.png';\nimport Navbar from '../navbar/Navbar';\n\nclass phishingStats extends Component {\n    constructor(props){\n        super()\n        this.state = {\n          pageViews: 0,\n        }\n    }\n    redirectPhishing = () => {\n        this.props.history.push('/phishingStats');\n    }\n\n    redirectUSB = () => {\n        this.props.history.push('/usbStats');\n    }\n    \n    render() {\n        return (\n            <div>\n                <Navbar />\n                    <div className=\"container\">\n                        <div className=\"welcomeText\">\n                        <strong><i>{\"Phishing Stats\"}</i></strong>\n                        </div><br />\n                        <div className=\"centerImage\">\n                            <img className='novaLogo' alt='Nova Logo' src={novaLogo}/>\n                        </div><br/>\n                        <table className=\"formatStatsTable\">\n                            <tbody>\n                                <tr className=\"headerCol\">\n                                    <th className=\"listHeadings col1Width\"></th>\n                                    <th className=\"listHeadings col2Width\">Number of Students</th>\n                                </tr>\n                                <tr key='1' className=\"formatStatsRow\">\n                                    <td className=\"listNames\">Phising Emails sent out:</td>\n                                    <td className=\"listOther\">52</td>\n                                </tr>\n                                <tr key='4' className=\"formatStatsRow\">\n                                    <td className=\"listNames\">Phishing Emails Opened:</td>\n                                    <td className=\"listOther\">54</td>\n                                </tr>\n                                <tr key='2' className=\"formatStatsRow\">\n                                    <td className=\"listNames\">Phishing Emails Submitted Data:</td>\n                                    <td className=\"listOther\">54</td>\n                                </tr>\n                                <tr key='3' className=\"formatStatsRow\">\n                                    <td className=\"listNames\">Percent:</td>\n                                    <td className=\"listOther\">35%</td>\n                                </tr>\n                            </tbody>\n                        </table><br />\n                        <div className=\"seperatePar\">\n                            <p>\n                                *Disclaimer: No personal information is stored during this survey.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default phishingStats;","import React, { Component } from 'react';\nimport novaLogo from '../../images/novaLogo.png';\nimport Navbar from '../navbar/Navbar';\n\n\nclass Admin extends Component {\n    constructor(props){\n        super()\n        this.state = {\n          pageViews: 0,\n          reset: false,\n        }\n    }\n    redirectPhishing = () => {\n        this.props.history.push('/phishingStats');\n    }\n\n    redirectUSB = () => {\n        this.props.history.push('/usbStats');\n    }\n\n    getNumViews = () => {\n        var url=\"/usbStats\";\n        fetch(url, {\n            method: 'GET'\n        })\n            .then(res => {\n                console.log(res);\n                return res.json();\n            }).then( data => {\n                console.log(data)\n                this.setState({pageViews: data.views})\n            })\n    }\n\n    resetViews = () => {\n        this.setState({reset:true})\n        var data = JSON.stringify({views: this.state.pageViews});\n        console.log(\"Input data:\"+data);\n        var url=\"/usbStats\";\n        fetch(url, {\n            method: 'DELETE',\n            headers: new Headers(),\n            body: JSON.stringify({views: this.state.pageViews})\n        })\n            .then(res => {\n                res.json();\n            })\n        }\n\n    componentDidMount = () => {\n        this.getNumViews();\n        console.log(\"Page Views:\"+this.state.pageViews);\n    }\n\n    printResetMessage = () => {\n        if(this.state.reset == true){\n            return (\n                <div>\n                    <p className=\"homePageText\">\n                        Successfully reset the number of views from {this.state.pageViews} to 0.\n                    </p>\n                </div>\n            )\n        }\n    }\n    \n    render() {\n        return (\n            <div>\n                <Navbar />\n                    <div className=\"container\"><br />\n                        <div className=\"mainPageButtons\">\n                            <button className=\"mainOptionButton\" onClick={() => this.resetViews()}>\n                                Reset Number of Views\n                            </button><br/><br/>\n                        </div>\n                        {this.printResetMessage()}\n                        <div className=\"seperatePar\">\n                            <p>\n                                *Disclaimer: No personal information is stored during this survey.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default Admin;","import React, { Component } from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport history from './history';\n\nimport Home from './pages/home/Home';\nimport USBDrive from './pages/usbdrive/USBDrive';\nimport phishingStats from './pages/phishingStats/phishingStats';\nimport Admin from './pages/admin/Admin';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router history={history}>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route exact path='/USBStats' component={USBDrive}/>\n          <Route exact path='/phishingStats' component={phishingStats}/>\n          <Route exact path='/admin' component={Admin}/>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}